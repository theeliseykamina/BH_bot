import os
import logging
import re
from datetime import datetime

# tg imports
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from telegram import Message


# docx
from docxtpl import DocxTemplate

# format
from num2words import num2words      # —á–∏—Å–ª–∞ –ø—Ä–æ–ø–∏—Å—å—é
from babel.dates import format_date  # –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ru-RU

# .env
from dotenv import load_dotenv


# logic
from form_logic import (
    format_date as custom_format_date,  # –Ω–∞—à–∞ –æ–±—ë—Ä—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö babel
    format_money,
    format_fio,
    format_location,
    to_upper,
    validate_street_and_house,
    fill_template,
)

# === –ò–º–ø–æ—Ä—Ç FIELDS ===
from fields import FIELDS


# ===============================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ===============================

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
ASK_FIELD = 1  # –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤: uid -> dict –æ—Ç–≤–µ—Ç–æ–≤ (–∫–ª—é—á–∏ –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ)
user_data: dict[int, dict] = {}

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
DEFAULT_KEYBOARD = ReplyKeyboardMarkup(
    [["-", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", "/start"]],
    resize_keyboard=True,
    one_time_keyboard=False,
    selective=True,
)

# CallbackData –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
CB_INSTRUCTION = "instruction"
CB_START_RENT = "start_rent"
CB_CONFIRM_RESTART = "confirm_restart"
CB_CONTINUE = "continue"

# –ò–Ω–ª–∞–π–Ω-–≤—ã–±–æ—Ä—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É
CB_PAYER_TENANT = "–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å"
CB_PAYER_LANDLORD = "–Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—å"
CB_YES = "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ"
CB_NO = "–∑–∞–ø—Ä–µ—â–µ–Ω–æ"
CB_DEFAULT_CONDITION = "default_condition"

# –ö–ª—é—á–∏ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (ContextTypes)
CTX_STEP = "step"                   # —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ FIELDS
CTX_SKIP_INLINE_SENT = "skip_inline_sent"  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏

# –ü—É—Ç–∏ –∫ —à–∞–±–ª–æ–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
TEMPLATE_PATH = "template.docx"  # –ø–æ–ª–æ–∂–∏ —à–∞–±–ª–æ–Ω —Ä—è–¥–æ–º —Å main.py
OUTPUT_DIR = ".venv/out"  # –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö .docx (–±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
CTX_SHOW_KEYBOARD_ONCE = "show_keyboard_once"

CB_DOC_EGRN = "doc_egrn"
CB_DOC_CERT = "doc_cert"

# –ù–æ–≤—ã–µ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –¥–æ–ø. –¥–æ–≥–æ–≤–æ—Ä–æ–≤
CB_DOC_COMM_TENANT = "doc_comm_tenant"   # –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è
CB_DOC_COMM_SOB    = "doc_comm_sob"      # –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—è

TEMPLATE_OKAZ_PATH = "template_okaz.docx"  # –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å
TEMPLATE_SOB_PATH  = "template_sob.docx"  # –Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—å

CTX_MAIN_SENT = "main_contract_sent"

CB_SKIP_DOC = "skip_doc"


# —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –≤–º–µ—Å—Ç–æ "-"
UNDERSCORE_WIDTHS = {
    # ===== –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =====
    "contract_number": 5,

    "naim_name": 98,
    "naim_address": 101,
    "naim_passport_series": 6,
    "naim_passport_number": 9,
    "naim_passport_issued_by": 93,
    "naim_passport_issued_date": 17,

    "ar_name": 94,
    "ar_address": 100,
    "ar_passport_series": 6,
    "ar_passport_number": 9,
    "ar_passport_issued_by": 93,
    "ar_passport_issued_date": 17,

    # ===== –û–±—ä–µ–∫—Ç –Ω–∞–π–º–∞ =====
    "obj_street": 27,
    "obj_house": 6,
    "obj_building": 6,
    "obj_flat": 6,
    "obj_rooms": 7,
    "obj_area": 16,
    "obj_kadastr": 50,

    # ===== –°–æ–≤–º–µ—Å—Ç–Ω–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–µ =====
    "obj_tenants": 97,

    # ===== –û–ø—Ü–∏–∏ =====
    "obj_animals": 62,
    "obj_smoking": 60,

    # ===== –°—Ä–æ–∫–∏ –Ω–∞–π–º–∞ =====
    "rent_start": 34,   # –æ–±–µ –¥–∞—Ç—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    # ===== –û–ø–ª–∞—Ç—ã =====
    "monthly_payment": 18,
    "deposit_date": 17,
    "deposit_amount": 18,
    "monthly_due_day": 4,
    "payment_utilities": 93,
    "payment_internet": 64,
    "payment_electricity": 64,
    "payment_water": 63,
    "payment_repair": 63,

    # ===== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è =====
    "additional_conditions": 540,  # —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ 90

    # ===== –ê–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ =====
    "act_date": 17,
    "act_condition": 115,
    "act_keys": 9,
    "act_electricity": 25,
    "act_hot_water": 23,
    "act_cold_water": 23,

    # ===== –ü—Ä–æ—á–µ–µ =====
    "name_of_document": 50,
    "document_value": 50,
    "obj_address": 80,   # –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ü–µ–ª–∏–∫–æ–º
}


# –ø–æ–ª—è, –≥–¥–µ –ø—Ä–∏ "-" –Ω–∞–¥–æ –ù–ï –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è, –∞ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ
EMPTY_IF_DASH = {
    "obj_building",  # –≤ –∞–¥—Ä–µ—Å–µ –∫–æ—Ä–ø—É—Å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–≤—Å–µ–º
    "obj_flat",      # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
}

CB_SKIP_ADDR = "skip_addr"
CB_SKIP_COMM = "skip_comm"






# ===============================
# –£—Ç–∏–ª–∏—Ç—ã: —Ç–æ–∫–µ–Ω, –ø–∞–ø–∫–∞, user_id
# ===============================

def get_token() -> str:
    load_dotenv()
    token = os.getenv("BOT_TOKEN", "").strip()
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏/.env")
    return token


def ensure_outdir() -> None:
    if not os.path.isdir(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR, exist_ok=True)


def uid_from(update: Update) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π user_id –∏–∑ –∞–ø–¥–µ–π—Ç–∞."""
    if update.effective_user:
        return update.effective_user.id
    # –§–æ–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–¥–∫–∏—Ö —Ç–∏–ø–æ–≤ –∞–ø–¥–µ–π—Ç–æ–≤
    if update.message and update.message.from_user:
        return update.message.from_user.id
    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id")


# ===============================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ===============================

async def send_start_menu(target: Message) -> None:
    text = (
        "–ø—Ä–∏–≤–µ—Ç!\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–æ–≥–æ–≤–æ—Ä."
    )
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=CB_INSTRUCTION),
            InlineKeyboardButton(text="üìÑ –î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã", callback_data=CB_START_RENT),
        ]
    ])
    await target.reply_text(text, reply_markup=keyboard)




# ===============================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ===============================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    step = context.user_data.get(CTX_STEP)
    if step is not None:
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=CB_CONFIRM_RESTART),
                InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_CONTINUE),
            ]
        ])
        await update.effective_message.reply_text(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è. –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
            reply_markup=keyboard
        )
        return

    # –æ–¥–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    await send_start_menu(update.effective_message)



def reset_to_start(context: ContextTypes.DEFAULT_TYPE, uid: int) -> None:
    context.user_data[CTX_STEP] = None
    context.user_data[CTX_SKIP_INLINE_SENT] = False
    context.user_data.pop(CTX_MAIN_SENT, None)
    user_data.pop(uid, None)  # –æ—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏




# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
# ===============================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == CB_INSTRUCTION:
        text = text = (
        "üìò **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n"
        "1Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ ‚Äî –±–æ—Ç —Å–∞–º —Å–æ–±–µ—Ä—ë—Ç –¥–æ–≥–æ–≤–æ—Ä.\n"
        "2Ô∏è‚É£ –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ª—é–±–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ ¬´-¬ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.\n"
        "3Ô∏è‚É£ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª¬ª ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä.\n"
        "4Ô∏è‚É£ –í—Å—ë —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n"
        "‚ú® **–ü–æ—á–µ–º—É —ç—Ç–æ —É–¥–æ–±–Ω–æ:**\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –¥–∞—Ç—ã, —Å—É–º–º—ã, –∞–¥—Ä–µ—Å–∞).\n"
        "‚Ä¢ –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ ‚Äî —á—Ç–æ–±—ã –¥–æ–∫—É–º–µ–Ω—Ç –≤—ã–≥–ª—è–¥–µ–ª –∏–¥–µ–∞–ª—å–Ω–æ.\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø. –¥–æ–≥–æ–≤–æ—Ä—ã (–∫–æ–º–∏—Å—Å–∏–∏ –∏ –∞–∫—Ç).\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
    )
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=CB_INSTRUCTION),
                    InlineKeyboardButton("üìÑ –î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã", callback_data=CB_START_RENT),
                ]
            ])
        )
        return

    uid = uid_from(update)

    if data == CB_START_RENT:
        user_data[uid] = {}
        context.user_data[CTX_STEP] = 0
        context.user_data[CTX_SKIP_INLINE_SENT] = False
        context.user_data[CTX_SHOW_KEYBOARD_ONCE] = True
        await query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞.")
        await ask_next_field(update, context)
        return ASK_FIELD

    if data == CB_CONFIRM_RESTART:
        user_data[uid] = {}
        context.user_data[CTX_STEP] = 0
        context.user_data[CTX_SKIP_INLINE_SENT] = False
        context.user_data[CTX_SHOW_KEYBOARD_ONCE] = True
        await query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
        await ask_next_field(update, context)
        return ASK_FIELD

    if data == CB_CONTINUE:
        context.user_data[CTX_SHOW_KEYBOARD_ONCE] = True
        await query.edit_message_text("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.")
        await ask_next_field(update, context)
        return ASK_FIELD

    # –î–æ–ø. –¥–æ–≥–æ–≤–æ—Ä: –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è
    if data == CB_DOC_COMM_TENANT:
        uid = uid_from(update)
        data_map = user_data.get(uid, {})
        ctx = {k: (v if v not in (None, "") else "-") for k, v in data_map.items()}

        doc_choice = data_map.get("doc_choice")
        if doc_choice == "egrn":
            ctx["name_of_document"] = "–í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù,"
            ctx["document_value"] = data_map.get("obj_kadastr", "-")
        elif doc_choice == "cert":
            ctx["name_of_document"] = "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞,"
            series = data_map.get("cert_series", "-")
            number = data_map.get("cert_number", "-")
            ctx["document_value"] = f"—Å–µ—Ä–∏—è {series} ‚Ññ {number}"
        else:
            ctx["name_of_document"] = "-"
            ctx["document_value"] = "-"

        ensure_outdir()
        filename = "–¥–æ–≥–æ–≤–æ—Ä_–∫–æ–º–∏—Å—Å–∏—è_–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å.docx"
        out_path = os.path.join(OUTPUT_DIR, filename)
        try:
            fill_template(ctx, TEMPLATE_OKAZ_PATH, out_path)
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END

        try:
            await query.message.chat.send_document(document=open(out_path, "rb"), filename=filename)
        finally:
            try:
                os.remove(out_path)
            except OSError:
                pass

        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–≥–æ–≤–æ—Ä: –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è.")
        reset_to_start(context, uid)
        await send_start_menu(query.message)
        return ConversationHandler.END

    # –î–æ–ø. –¥–æ–≥–æ–≤–æ—Ä: –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—è
    if data == CB_DOC_COMM_SOB:
        uid = uid_from(update)
        data_map = user_data.get(uid, {})
        ctx = {k: (v if v not in (None, "") else "-") for k, v in data_map.items()}

        doc_choice = data_map.get("doc_choice")
        if doc_choice == "egrn":
            ctx["name_of_document"] = "–í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù,"
            ctx["document_value"] = data_map.get("obj_kadastr", "-")
        elif doc_choice == "cert":
            ctx["name_of_document"] = "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞,"
            series = data_map.get("cert_series", "-")
            number = data_map.get("cert_number", "-")
            ctx["document_value"] = f"—Å–µ—Ä–∏—è {series} ‚Ññ {number}"
        else:
            ctx["name_of_document"] = "-"
            ctx["document_value"] = "-"

        ensure_outdir()
        filename = "–¥–æ–≥–æ–≤–æ—Ä_–∫–æ–º–∏—Å—Å–∏—è_—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫.docx"
        out_path = os.path.join(OUTPUT_DIR, filename)
        try:
            fill_template(ctx, TEMPLATE_SOB_PATH, out_path)
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END

        try:
            await query.message.chat.send_document(document=open(out_path, "rb"), filename=filename)
        finally:
            try:
                os.remove(out_path)
            except OSError:
                pass

        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–≥–æ–≤–æ—Ä: –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—è.")
        reset_to_start(context, uid)
        await send_start_menu(query.message)
        return ConversationHandler.END

    # –ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø. –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    if data == CB_SKIP_COMM:
        uid = uid_from(update)
        await query.edit_message_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        reset_to_start(context, uid)
        await send_start_menu(query.message)
        return ConversationHandler.END


# ===============================
# –Ø–¥—Ä–æ –æ–ø—Ä–æ—Å–∞: –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
# (—ç—Ç–∞–ø 1: —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤)
# ===============================

async def ask_next_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    step = context.user_data.get(CTX_STEP, 0)
    if step >= len(FIELDS):
        if context.user_data.get(CTX_MAIN_SENT):
            return  # —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø—Ä–æ –¥–æ–ø. –¥–æ–≥–æ–≤–æ—Ä—ã, –∂–¥—ë–º –∫–ª–∏–∫–∞
        context.user_data[CTX_MAIN_SENT] = True
        await update.effective_message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª...")
        await download_file(update, context)
        # –æ—Å—Ç–∞—ë–º—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ –∏ –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ ¬´–ö–æ–º–∏—Å—Å–∏—è ‚Ä¶¬ª
        context.user_data[CTX_STEP] = len(FIELDS) + 1  # —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return


    # –ê–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∏: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ï–ì–†–ù ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞; –µ—Å–ª–∏ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥–∞—Å—Ç—Ä
    uid = uid_from(update)
    current = FIELDS[step]
    key = current["key"]
    choice = user_data.get(uid, {}).get("doc_choice")

    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é
    if choice == "skip":
        # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        skip_fields = ("obj_kadastr", "cert_series", "cert_number")
        if key in skip_fields:
            width = UNDERSCORE_WIDTHS.get(key, 40)
            user_data.setdefault(uid, {})[key] = "_" * width
            context.user_data[CTX_STEP] = step + 1
            await ask_next_field(update, context)
            return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ï–ì–†–ù ‚Äî –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ
    if choice == "egrn" and key in ("cert_series", "cert_number"):
        width = UNDERSCORE_WIDTHS.get(key, 40)
        user_data.setdefault(uid, {})[key] = "_" * width
        context.user_data[CTX_STEP] = step + 1
        await ask_next_field(update, context)
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥–∞—Å—Ç—Ä
    if choice == "cert" and key == "obj_kadastr":
        width = UNDERSCORE_WIDTHS.get(key, 40)
        user_data.setdefault(uid, {})[key] = "_" * width
        context.user_data[CTX_STEP] = step + 1
        await ask_next_field(update, context)
        return


    field = FIELDS[step]
    question = field["question"]
    formatter = field.get("formatter")

    # —Ä–µ—à–∞–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
    show_reply = context.user_data.pop(CTX_SHOW_KEYBOARD_ONCE, False)
    reply_kwargs = {"reply_markup": DEFAULT_KEYBOARD} if show_reply else {}

    # –ò–Ω–ª–∞–π–Ω-–≤–∞—Ä–∏–∞–Ω—Ç—ã
    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –ø–ª–∞—Ç–µ–ª—å—â–∏–∫ =====
    if formatter == "inline_buttons":
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞–Ω–∏–º–∞—Ç–µ–ª—å", callback_data=CB_PAYER_TENANT),
                InlineKeyboardButton("–ù–∞–π–º–æ–¥–∞—Ç–µ–ª—å", callback_data=CB_PAYER_LANDLORD),
            ]])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(question, reply_markup=kb)
        return

    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –¥–∞/–Ω–µ—Ç =====
    if formatter == "inline_yes_no":
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–†–∞–∑—Ä–µ—à–µ–Ω–æ", callback_data=CB_YES),
                InlineKeyboardButton("–ó–∞–ø—Ä–µ—â–µ–Ω–æ", callback_data=CB_NO),
            ]])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(question, reply_markup=kb)
        return

    if formatter == "inline_default_condition":
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üü¢ –í—Å—ë –∏—Å–ø—Ä–∞–≤–Ω–æ‚Ä¶", callback_data=CB_DEFAULT_CONDITION)]
            ])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(
                question + "\n–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É.",
                reply_markup=kb
            )
            return
        return

    # –ú—É–ª—å—Ç–∏-–∞–¥—Ä–µ—Å

    if formatter in ("multi_address_naim", "multi_address_ar"):
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data=CB_SKIP_ADDR)]])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(
                question + " (–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)",
                reply_markup=kb
            )
        return

    if formatter == "multi_address_obj":
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data=CB_SKIP_ADDR)]])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(question, reply_markup=kb)
        return

    # –í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∞ (–ï–ì–†–ù/–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ)
    if formatter == "inline_doc_choice":
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ï–ì–†–ù", callback_data=CB_DOC_EGRN),
                InlineKeyboardButton("–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data=CB_DOC_CERT),
                InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=CB_SKIP_DOC),
            ]])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(question, reply_markup=kb)
        return

    # –î–µ–ª–∞—Ç—å –ª–∏ –∞–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏? (–î–∞/–ù–µ—Ç)
    if formatter == "inline_make_act":
        if not context.user_data.get(CTX_SKIP_INLINE_SENT):
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–î–∞", callback_data=CB_YES),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data=CB_NO),
                ]
            ])
            context.user_data[CTX_SKIP_INLINE_SENT] = True
            await update.effective_message.reply_text(question, reply_markup=kb)
            return
        return


    # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    await update.effective_message.reply_text(question, **reply_kwargs)




# ===============================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ —à–∞–≥–∞
# ===============================

async def on_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    msg = update.effective_message
    uid = uid_from(update)
    step = context.user_data.get(CTX_STEP, 0)

    if step is None:
        await send_start_menu(msg)
        return ASK_FIELD

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç ¬´–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª¬ª (–æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    if msg and msg.text and msg.text.strip().lower() == "—Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª":
        await download_file(update, context)
        reset_to_start(context, uid)
        await send_start_menu(msg)
        return ConversationHandler.END

    if step >= len(FIELDS):
        # —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑ ask_next_field
        return ASK_FIELD

    field = FIELDS[step]
    key = field["key"]
    formatter = field.get("formatter")

    # ===== –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ =====
    is_cb = update.callback_query is not None
    cb_data = update.callback_query.data if is_cb else None
    text = None if is_cb else (msg.text or "").strip()

    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –ø–ª–∞—Ç–µ–ª—å—â–∏–∫ =====
    if formatter == "inline_buttons":
        # –ø—Ä–æ–ø—É—Å–∫ —á–µ—Ä–µ–∑ "-"
        if not is_cb and text == "-":
            user_data.setdefault(uid, {})[key] = "-"
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await msg.reply_text("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")
            await ask_next_field(update, context)
            return ASK_FIELD

        if not is_cb:
            return ASK_FIELD
        if cb_data == CB_PAYER_TENANT:
            value = "–ù–∞–Ω–∏–º–∞—Ç–µ–ª—å"
        elif cb_data == CB_PAYER_LANDLORD:
            value = "–ù–∞–π–º–æ–¥–∞—Ç–µ–ª—å"
        else:
            return ASK_FIELD
        user_data.setdefault(uid, {})[key] = value
        context.user_data[CTX_STEP] = step + 1
        context.user_data[CTX_SKIP_INLINE_SENT] = False
        await update.callback_query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {value}")
        await ask_next_field(update, context)
        return ASK_FIELD

    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –¥–∞/–Ω–µ—Ç =====
    if formatter == "inline_yes_no":
        # –ø—Ä–æ–ø—É—Å–∫ —á–µ—Ä–µ–∑ "-"
        if not is_cb and text == "-":
            user_data.setdefault(uid, {})[key] = "-"
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await msg.reply_text("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")
            await ask_next_field(update, context)
            return ASK_FIELD

        if not is_cb:
            return ASK_FIELD
        if cb_data == CB_YES:
            value = "–†–∞–∑—Ä–µ—à–µ–Ω–æ"
        elif cb_data == CB_NO:
            value = "–ó–∞–ø—Ä–µ—â–µ–Ω–æ"
        else:
            return ASK_FIELD
        user_data.setdefault(uid, {})[key] = value
        context.user_data[CTX_STEP] = step + 1
        context.user_data[CTX_SKIP_INLINE_SENT] = False
        await update.callback_query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {value}")
        await ask_next_field(update, context)
        return ASK_FIELD

    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞: –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∞ =====
    if formatter == "inline_default_condition":
        if is_cb and cb_data == CB_DEFAULT_CONDITION:
            user_data.setdefault(uid, {})[key] = (
                "–í—Å—ë –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø—Ä–∞–≤–Ω—ã –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–µ–º –∏ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
            )
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await update.callback_query.edit_message_text("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É.")
            await ask_next_field(update, context)
            return ASK_FIELD
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
        if not is_cb and text:
            user_data.setdefault(uid, {})[key] = text
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await ask_next_field(update, context)
            return ASK_FIELD
        return ASK_FIELD

    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∞ =====
    if formatter == "inline_doc_choice":
        # –ø—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–º "-"
        if not is_cb and text == "-":
            # –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º; download_file —É–∂–µ —É–º–µ–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –¥–µ—Ñ–æ–ª—Ç ("-")
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await msg.reply_text("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")
            await ask_next_field(update, context)
            return ASK_FIELD

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
        if not is_cb:
            return ASK_FIELD

        if cb_data == CB_DOC_EGRN:
            user_data.setdefault(uid, {})["doc_choice"] = "egrn"
            picked = "–ï–ì–†–ù"
        elif cb_data == CB_DOC_CERT:
            user_data.setdefault(uid, {})["doc_choice"] = "cert"
            picked = "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ"
        elif cb_data == CB_SKIP_DOC:
            # –ø—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Äa
            user_data.setdefault(uid, {})["doc_choice"] = "skip"
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await update.callback_query.edit_message_text("–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∞–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω.")
            await ask_next_field(update, context)
            return ASK_FIELD
        else:
            return ASK_FIELD

        context.user_data[CTX_STEP] = step + 1
        context.user_data[CTX_SKIP_INLINE_SENT] = False
        await update.callback_query.edit_message_text(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç: {picked}")
        await ask_next_field(update, context)
        return ASK_FIELD

    # ===== –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: –¥–µ–ª–∞—Ç—å –ª–∏ –∞–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ =====
    if formatter == "inline_make_act":
        if not is_cb:
            return ASK_FIELD

        if cb_data == CB_YES:
            # –î–∞: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –ø–æ–ª–µ–π –∞–∫—Ç–∞
            user_data.setdefault(uid, {})[key] = "–î–∞"
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await update.callback_query.edit_message_text("‚úÖ –ê–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
            await ask_next_field(update, context)
            return ASK_FIELD

        if cb_data == CB_NO:
            # –ù–µ—Ç: –∞–∫—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑
            user_data.setdefault(uid, {})[key] = "–ù–µ—Ç"
            context.user_data[CTX_STEP] = len(FIELDS) + 1  # –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–ø—Ä–æ—Å–∞, –Ω–æ –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            if not context.user_data.get(CTX_MAIN_SENT):
                context.user_data[CTX_MAIN_SENT] = True
                await update.callback_query.edit_message_text("üö´ –ê–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è.\n–§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª‚Ä¶")
                await download_file(update, context)
            return ASK_FIELD

        return ASK_FIELD

    # ===== –ú—É–ª—å—Ç–∏-–∞–¥—Ä–µ—Å: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–Ω–∞–∏–º/–Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—å) =====
    if formatter in ("multi_address_naim", "multi_address_ar"):
        phase_key = f"{key}_phase"
        temp_key = f"{key}_temp"
        phase = context.user_data.get(phase_key, "city")
        temp = context.user_data.setdefault(temp_key, {})

        # 1) –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–¥—Ä–µ—Å"
        if is_cb and cb_data == CB_SKIP_ADDR:
            width = UNDERSCORE_WIDTHS.get(key, 40)
            user_data.setdefault(uid, {})[key] = "_" * width
            # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
            context.user_data.pop(phase_key, None)
            context.user_data.pop(temp_key, None)
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await update.callback_query.edit_message_text("–ê–¥—Ä–µ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")
            await ask_next_field(update, context)
            return ASK_FIELD

        # 2) –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ callback-–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å
        if is_cb:
            return ASK_FIELD

        # 3) –¢—Ä–µ–±—É–µ–º —Ç–µ–∫—Å—Ç
        if not text:
            await msg.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´-¬ª.")
            return ASK_FIELD

        # 4) –§–∞–∑—ã –≤–≤–æ–¥–∞
        if phase == "city":
            temp["city"] = format_location(text)
            if temp["city"] is None:
                await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ—Ä–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
                return ASK_FIELD
            context.user_data[phase_key] = "street"
            await msg.reply_text("–£–ª–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä–æ—á–Ω–∞—è):")
            return ASK_FIELD

        if phase == "street":
            temp["street"] = format_location(text)
            if temp["street"] is None:
                await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ª–∏—Ü—ã. –ü—Ä–∏–º–µ—Ä: –¢–≤–µ—Ä—Å–∫–∞—è")
                return ASK_FIELD
            context.user_data[phase_key] = "house"
            await msg.reply_text("–î–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10, 10–ê, 10/2):")
            return ASK_FIELD

        if phase == "house":
            if text.strip() == "-":
                temp["house"] = "-"
                context.user_data[phase_key] = "building"
                await msg.reply_text("–ö–æ—Ä–ø—É—Å (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª):")
                return ASK_FIELD
            ok = validate_street_and_house(temp["street"], text)
            if not ok:
                await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º. –ü—Ä–∏–º–µ—Ä: 10, 10–∫2, 10/2")
                return ASK_FIELD
            _, house_norm = ok
            temp["house"] = house_norm
            context.user_data[phase_key] = "building"
            await msg.reply_text("–ö–æ—Ä–ø—É—Å (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª):")
            return ASK_FIELD

        if phase == "building":
            temp["building"] = text.strip()
            context.user_data[phase_key] = "flat"
            await msg.reply_text("–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–ü—Ä–∏–º–µ—Ä: 777):")
            return ASK_FIELD

        if phase == "flat":
            temp["flat"] = text.strip()

            parts = [f"–≥. {temp['city']}", f"—É–ª. {temp['street']}", f"–¥. {temp['house']}"]
            if temp.get("building") and temp["building"] != "-":
                parts.append(f"–∫. {temp['building']}")
            if temp.get("flat") and temp["flat"] != "-":
                parts.append(f"–∫–≤. {temp['flat']}")
            full_addr = ", ".join(parts) + ","

            user_data.setdefault(uid, {})[key] = full_addr
            context.user_data.pop(phase_key, None)
            context.user_data.pop(temp_key, None)

            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await ask_next_field(update, context)
            return ASK_FIELD

    if formatter == "multi_address_obj":
        phase_key = f"{key}_phase"
        temp_key = f"{key}_temp"

        if is_cb and cb_data == CB_SKIP_ADDR:
            width = UNDERSCORE_WIDTHS.get("obj_address", 40)
            ud = user_data.setdefault(uid, {})
            ud["obj_address"] = "_" * width
            ud["obj_street"] = "-"
            ud["obj_house"] = "-"
            ud["obj_building"] = ""
            ud["obj_flat"] = ""
            context.user_data.pop(phase_key, None)
            context.user_data.pop(temp_key, None)
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await update.callback_query.edit_message_text("–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω.")
            await ask_next_field(update, context)
            return ASK_FIELD

    # ===== –ú—É–ª—å—Ç–∏-–∞–¥—Ä–µ—Å: –æ–±—ä–µ–∫—Ç –Ω–∞–π–º–∞ (–≥–æ—Ä–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥) =====
    if formatter == "multi_address_obj":
        phase_key = f"{key}_phase"  # street -> house -> building -> flat
        phase = context.user_data.get(phase_key, "street")
        temp = context.user_data.setdefault(f"{key}_temp", {})

        # –¢—Ä–µ–±—É–µ–º —Ç–µ–∫—Å—Ç
        if is_cb or not text:
            await msg.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´-¬ª.")
            return ASK_FIELD

        if phase == "street":
            temp["street"] = format_location(text)
            if temp["street"] is None:
                await msg.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —É–ª–∏—Ü–∞. –ü—Ä–∏–º–µ—Ä: –¢–≤–µ—Ä—Å–∫–∞—è")
                return ASK_FIELD
            context.user_data[phase_key] = "house"
            await msg.reply_text("–î–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10, 10–∫2, 10/2):")
            return ASK_FIELD

        if phase == "house":
            if text.strip() == "-":
                temp["house"] = "-"
            else:
                ok = validate_street_and_house(temp["street"], text)
                if not ok:
                    await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º. –ü—Ä–∏–º–µ—Ä: 10, 10–∫2, 10/2")
                    return ASK_FIELD
                _, house_norm = ok
                temp["house"] = house_norm
            context.user_data[phase_key] = "building"
            await msg.reply_text("–ö–æ—Ä–ø—É—Å (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª):")
            return ASK_FIELD

        if phase == "building":
            temp["building"] = text.strip()
            context.user_data[phase_key] = "flat"
            await msg.reply_text("–ö–≤–∞—Ä—Ç–∏—Ä–∞ (—á–∏—Å–ª–æ –∏–ª–∏ ¬´-¬ª):")
            return ASK_FIELD

        if phase == "flat":
            temp["flat"] = text.strip()

            # –°–∫–ª–µ–π–∫–∞ –∞–¥—Ä–µ—Å–∞: –≥–æ—Ä–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
            parts = [
                "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                f"—É–ª. {temp['street']}",
            ]
            if temp.get("house") and temp["house"] != "-":
                parts.append(f"–¥. {temp['house']}")
            if temp.get("building") and temp["building"] != "-":
                parts.append(f"–∫. {temp['building']}")
            if temp.get("flat") and temp["flat"] != "-":
                parts.append(f"–∫–≤. {temp['flat']}")

            full_addr = ", ".join(parts) + ","

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥ –∏, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏, —á–∞—Å—Ç–∏ —Ç–æ–∂–µ
            ud = user_data.setdefault(uid, {})
            ud["obj_address"] = full_addr
            ud["obj_street"] = temp.get("street", "-")
            ud["obj_house"] = temp.get("house", "-")
            ud["obj_building"] = (temp.get("building") if temp.get("building") != "-" else "")
            ud["obj_flat"] = (temp.get("flat") if temp.get("flat") != "-" else "")

            # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
            context.user_data.pop(phase_key, None)
            context.user_data.pop(f"{key}_temp", None)

            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await ask_next_field(update, context)
            return ASK_FIELD

    # ===== –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –¥–æ–ø. —É—Å–ª–æ–≤–∏—è =====
    if formatter == "multi_conditions":
        buf_key = f"{key}_buf"
        buf = context.user_data.get(buf_key, [])
        if not is_cb and text == "-":
            if not buf:
                user_data.setdefault(uid, {})[key] = "-"
            else:
                numbered = "\n".join(f"{i + 1}. {line}" for i, line in enumerate(buf))
                user_data.setdefault(uid, {})[key] = numbered
            context.user_data.pop(buf_key, None)
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await ask_next_field(update, context)
            return ASK_FIELD
        if not is_cb and text:
            buf.append(text)
            context.user_data[buf_key] = buf
            await msg.reply_text(
                "–î–æ–±–∞–≤–ª–µ–Ω–æ. –°–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏–ª–∏ ¬´-¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
                reply_markup=DEFAULT_KEYBOARD
            )
            return ASK_FIELD
        return ASK_FIELD

    # ===== –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö (—Å–ø–∏—Å–∫–æ–º) =====
    if formatter == "multi_tenants":
        buf_key = f"{key}_buf"
        buf = context.user_data.get(buf_key, [])
        if is_cb:
            return ASK_FIELD

        if text == "-":
            if not buf:
                user_data.setdefault(uid, {})[key] = "-"
            else:
                numbered = "\n".join(f"{i + 1}. {p}" for i, p in enumerate(buf))
                user_data.setdefault(uid, {})[key] = numbered
            context.user_data.pop(buf_key, None)
            context.user_data[CTX_STEP] = step + 1
            context.user_data[CTX_SKIP_INLINE_SENT] = False
            await ask_next_field(update, context)
            return ASK_FIELD

        fio = format_fio(text)
        if fio is None:
            await msg.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                reply_markup=DEFAULT_KEYBOARD
            )
            return ASK_FIELD

        buf.append(fio)
        context.user_data[buf_key] = buf
        await msg.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –§–ò–û –∏–ª–∏ ¬´-¬ª –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ.",
            reply_markup=DEFAULT_KEYBOARD
        )
        return ASK_FIELD

    # ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–ª—è =====
    if not is_cb:
        if text == "-":
            user_data.setdefault(uid, {})[key] = "-"
        else:
            value = None
            if callable(formatter):
                try:
                    value = formatter(text)
                except Exception:
                    value = None
            elif formatter in (None,):
                value = text

            if value is None:
                await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=DEFAULT_KEYBOARD)
                return ASK_FIELD

            user_data.setdefault(uid, {})[key] = value

        if key == "naim_name":
            await msg.reply_text("üìç –¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è.")
        if key == "ar_name":
            await msg.reply_text("üìç –¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–π–º–æ–¥–∞—Ç–µ–ª—è.")

        context.user_data[CTX_STEP] = step + 1
        context.user_data[CTX_SKIP_INLINE_SENT] = False
        await ask_next_field(update, context)
        return ASK_FIELD


# ===============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
# ===============================

async def download_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç .docx, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª. –ó–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–ø. –¥–æ–≥–æ–≤–æ—Ä—ã."""
    ensure_outdir()
    uid = uid_from(update)
    data = user_data.get(uid, {})

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã
    ctx = {k: (v if v not in (None, "") else "-") for k, v in data.items()}

    def _dash_to_underscores(ctx: dict) -> dict:
        out = dict(ctx)
        for k, v in list(out.items()):
            if v == "-":
                if k in EMPTY_IF_DASH:
                    out[k] = ""  # –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º
                else:
                    width = UNDERSCORE_WIDTHS.get(k, 20)  # –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –¥–ª–∏–Ω–∞
                    out[k] = "_" * width
        return out

    ctx = _dash_to_underscores(ctx)

    # 3) –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∞–≤–∞ ‚Äî —Å—Ç—Ä–æ–∏–º –ò–ó ctx
    doc_choice = data.get("doc_choice")
    if doc_choice == "egrn":
        ctx["name_of_document"] = "–í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù,"
        ctx["document_value"] = ctx.get("obj_kadastr", "-")
    elif doc_choice == "cert":
        ctx["name_of_document"] = "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞,"
        series = ctx.get("cert_series", "-")
        number = ctx.get("cert_number", "-")
        ctx["document_value"] = f"—Å–µ—Ä–∏—è {series} ‚Ññ {number}"
    else:  # skip
        ctx["name_of_document"] = "-"
        ctx["document_value"] = "-"

    # 4) —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ ‚Äî —á—Ç–æ–±—ã name_of_document/document_value —Ç–æ–∂–µ —Å—Ç–∞–ª–∏ –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–º–∏
    ctx = _dash_to_underscores(ctx)

    # –ò–º—è —Ñ–∞–π–ª–∞
    def surname(fullname: str | None) -> str:
        if not fullname or fullname == "-":
            return "unknown"
        return fullname.split()[0]

    ar_surname = surname(data.get("ar_name"))
    naim_surname = surname(data.get("naim_name"))
    filename = f"–¥–æ–≥–æ–≤–æ—Ä_{ar_surname}_{naim_surname}.docx"
    out_path = os.path.join(OUTPUT_DIR, filename)

    # –†–µ–Ω–¥–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    try:
        fill_template(ctx, TEMPLATE_PATH, out_path)
    except Exception as e:
        await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    try:
        await update.effective_message.reply_document(document=open(out_path, "rb"), filename=filename)
    finally:
        try:
            os.remove(out_path)
        except OSError:
            pass

    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø. –¥–æ–≥–æ–≤–æ—Ä—ã
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ö–æ–º–∏—Å—Å–∏—è –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å", callback_data=CB_DOC_COMM_TENANT),
            InlineKeyboardButton("–ö–æ–º–∏—Å—Å–∏—è —Å–æ–±", callback_data=CB_DOC_COMM_SOB),
        ],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=CB_SKIP_COMM)]
    ])
    await update.effective_message.reply_text(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞—Ö?",
        reply_markup=kb
    )





# ===============================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: main()
# ===============================

def build_conversation() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(
                button_handler,
                pattern=f"^({CB_INSTRUCTION}|{CB_START_RENT}|{CB_CONFIRM_RESTART}|{CB_CONTINUE}|{CB_DOC_COMM_TENANT}|{CB_DOC_COMM_SOB}|{CB_SKIP_COMM})$"

            ),
        ],
        states={
            ASK_FIELD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_user_input),
                CallbackQueryHandler(
                    on_user_input,
                    pattern=f"^({CB_PAYER_TENANT}|{CB_PAYER_LANDLORD}|{CB_YES}|{CB_NO}|{CB_DEFAULT_CONDITION}|{CB_DOC_EGRN}|{CB_DOC_CERT}|{CB_SKIP_ADDR}|{CB_SKIP_DOC})$"

                ),
            ]
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True,
    )


def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
    ensure_outdir()
    token = get_token()

    app = Application.builder().token(token).build()

    conv = build_conversation()
    app.add_handler(conv)

    # –î–æ–ø. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–µ ConversationHandler
    app.add_handler(CallbackQueryHandler(button_handler, pattern=f"^({CB_INSTRUCTION}|{CB_START_RENT}|{CB_CONFIRM_RESTART}|{CB_CONTINUE})$"))

    app.run_polling(close_loop=False)

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é: python main.py
if __name__ == "__main__":
    main()
